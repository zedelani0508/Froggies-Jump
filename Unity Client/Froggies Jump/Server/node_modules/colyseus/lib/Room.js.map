{"version":3,"file":"Room.js","sourceRoot":"","sources":["../src/Room.ts"],"names":[],"mappings":"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","sourcesContent":["import http from 'http';\nimport msgpack from 'notepack.io';\n\nimport { decode, Iterator, Schema } from '@colyseus/schema';\n\nimport Clock from '@gamestdio/timer';\nimport { EventEmitter } from 'events';\n\nimport { Presence } from './presence/Presence';\n\nimport { FossilDeltaSerializer } from './serializer/FossilDeltaSerializer';\nimport { NoneSerializer } from './serializer/NoneSerializer';\nimport { SchemaSerializer } from './serializer/SchemaSerializer';\nimport { Serializer } from './serializer/Serializer';\n\nimport { ErrorCode, getMessageBytes, Protocol } from './Protocol';\nimport { Deferred, spliceOne } from './Utils';\n\nimport { debugAndPrintError, debugPatch } from './Debug';\nimport { ServerError } from './errors/ServerError';\nimport { RoomListingData } from './matchmaker/drivers/Driver';\nimport { Client, ClientState, ISendOptions } from './transport/Transport';\n\nconst DEFAULT_PATCH_RATE = 1000 / 20; // 20fps (50ms)\nconst DEFAULT_SIMULATION_INTERVAL = 1000 / 60; // 60fps (16.66ms)\n\nexport const DEFAULT_SEAT_RESERVATION_TIME = Number(process.env.COLYSEUS_SEAT_RESERVATION_TIME || 15);\n\nexport type SimulationCallback = (deltaTime: number) => void;\n\nexport type RoomConstructor<T= any> = new (presence?: Presence) => Room<T>;\n\nexport interface IBroadcastOptions extends ISendOptions {\n  except?: Client;\n}\n\nexport enum RoomInternalState {\n  CREATING = 0,\n  CREATED = 1,\n  DISCONNECTING = 2,\n}\n\nexport abstract class Room<State= any, Metadata= any> {\n\n  public get locked() {\n    return this._locked;\n  }\n\n  public get metadata() {\n    return this.listing.metadata;\n  }\n\n  public listing: RoomListingData<Metadata>;\n  public clock: Clock = new Clock();\n\n  public roomId: string;\n  public roomName: string;\n\n  public maxClients: number = Infinity;\n  public patchRate: number = DEFAULT_PATCH_RATE;\n  public autoDispose: boolean = true;\n\n  public state: State;\n  public presence: Presence;\n\n  public clients: Client[] = [];\n  public internalState: RoomInternalState = RoomInternalState.CREATING;\n\n  /** @internal */\n  public _events = new EventEmitter();\n\n  // seat reservation & reconnection\n  protected seatReservationTime: number = DEFAULT_SEAT_RESERVATION_TIME;\n  protected reservedSeats: { [sessionId: string]: any } = {};\n  protected reservedSeatTimeouts: { [sessionId: string]: NodeJS.Timer } = {};\n\n  protected reconnections: { [sessionId: string]: Deferred } = {};\n\n  private onMessageHandlers: {[id: string]: (client: Client, message: any) => void} = {};\n\n  private _serializer: Serializer<State> = new NoneSerializer();\n  private _afterNextPatchBroadcasts: IArguments[] = [];\n\n  private _simulationInterval: NodeJS.Timer;\n  private _patchInterval: NodeJS.Timer;\n\n  private _locked: boolean = false;\n  private _lockedExplicitly: boolean = false;\n  private _maxClientsReached: boolean = false;\n\n  // this timeout prevents rooms that are created by one process, but no client\n  // ever had success joining into it on the specified interval.\n  private _autoDisposeTimeout: NodeJS.Timer;\n\n  constructor(presence?: Presence) {\n    this.presence = presence;\n\n    this._events.once('dispose', async () => {\n      try {\n        await this._dispose();\n\n      } catch (e) {\n        debugAndPrintError(`onDispose error: ${(e && e.message || e || 'promise rejected')}`);\n      }\n      this._events.emit('disconnect');\n    });\n\n    this.setPatchRate(this.patchRate);\n  }\n\n  // Optional abstract methods\n  public onCreate?(options: any): void | Promise<any>;\n  public onJoin?(client: Client, options?: any, auth?: any): void | Promise<any>;\n  public onLeave?(client: Client, consented?: boolean): void | Promise<any>;\n  public onDispose?(): void | Promise<any>;\n  public onAuth(client: Client, options: any, request?: http.IncomingMessage): any | Promise<any> {\n    return true;\n  }\n\n  public hasReachedMaxClients(): boolean {\n    return (this.clients.length + Object.keys(this.reservedSeats).length) >= this.maxClients;\n  }\n\n  public setSeatReservationTime(seconds: number) {\n    this.seatReservationTime = seconds;\n    return this;\n  }\n\n  public hasReservedSeat(sessionId: string): boolean {\n    return this.reservedSeats[sessionId] !== undefined;\n  }\n\n  public setSimulationInterval(onTickCallback?: SimulationCallback, delay: number = DEFAULT_SIMULATION_INTERVAL): void {\n    // clear previous interval in case called setSimulationInterval more than once\n    if (this._simulationInterval) { clearInterval(this._simulationInterval); }\n\n    if (onTickCallback) {\n      this._simulationInterval = setInterval(() => {\n        this.clock.tick();\n        onTickCallback(this.clock.deltaTime);\n      }, delay);\n    }\n  }\n\n  public setPatchRate(milliseconds: number): void {\n    this.patchRate = milliseconds;\n\n    // clear previous interval in case called setPatchRate more than once\n    if (this._patchInterval) {\n      clearInterval(this._patchInterval);\n      this._patchInterval = undefined;\n    }\n\n    if (milliseconds !== null && milliseconds !== 0) {\n      this._patchInterval = setInterval(() => this.broadcastPatch(), milliseconds);\n    }\n  }\n\n  public setState(newState: State) {\n    this.clock.start();\n\n    if ('_definition' in newState) {\n      this._serializer = new SchemaSerializer();\n\n    } else {\n      this._serializer = new FossilDeltaSerializer();\n    }\n\n    this._serializer.reset(newState);\n\n    this.state = newState;\n  }\n\n  public async setMetadata(meta: Partial<Metadata>) {\n    if (!this.listing.metadata) {\n      this.listing.metadata = meta as Metadata;\n\n    } else {\n      for (const field in meta) {\n        if (!meta.hasOwnProperty(field)) { continue; }\n        this.listing.metadata[field] = meta[field];\n      }\n\n      // `MongooseDriver` workaround: persit metadata mutations\n      if ('markModified' in this.listing) {\n        (this.listing as any).markModified('metadata');\n      }\n    }\n\n    if (this.internalState === RoomInternalState.CREATED) {\n      await this.listing.save();\n    }\n  }\n\n  public async setPrivate(bool: boolean = true) {\n    this.listing.private = bool;\n\n    if (this.internalState === RoomInternalState.CREATED) {\n      await this.listing.save();\n    }\n  }\n\n  public async lock() {\n    // rooms locked internally aren't explicit locks.\n    this._lockedExplicitly = (arguments[0] === undefined);\n\n    // skip if already locked.\n    if (this._locked) { return; }\n\n    this._locked = true;\n\n    await this.listing.updateOne({\n      $set: { locked: this._locked },\n    });\n\n    this._events.emit('lock');\n  }\n\n  public async unlock() {\n    // only internal usage passes arguments to this function.\n    if (arguments[0] === undefined) {\n      this._lockedExplicitly = false;\n    }\n\n    // skip if already locked\n    if (!this._locked) { return; }\n\n    this._locked = false;\n\n    await this.listing.updateOne({\n      $set: { locked: this._locked },\n    });\n\n    this._events.emit('unlock');\n  }\n\n  public send(client: Client, type: string | number, message: any, options?: ISendOptions): void;\n  public send(client: Client, message: Schema, options?: ISendOptions): void;\n  public send(client: Client, messageOrType: any, messageOrOptions?: any | ISendOptions, options?: ISendOptions): void {\n    console.warn('DEPRECATION WARNING: use client.send(...) instead of this.send(client, ...)');\n    client.send(messageOrType, messageOrOptions, options);\n  }\n\n  public broadcast(type: string | number, message?: any, options?: IBroadcastOptions);\n  public broadcast<T extends Schema>(message: T, options?: IBroadcastOptions);\n  public broadcast(\n    typeOrSchema: string | number | Schema,\n    messageOrOptions?: any | IBroadcastOptions,\n    options?: IBroadcastOptions,\n  ) {\n    const isSchema = (typeof(typeOrSchema) === 'object');\n    const opts: IBroadcastOptions = ((isSchema) ? messageOrOptions : options);\n\n    if (opts && opts.afterNextPatch) {\n      delete opts.afterNextPatch;\n      this._afterNextPatchBroadcasts.push(arguments);\n      return;\n    }\n\n    if (isSchema) {\n      this.broadcastMessageSchema(typeOrSchema as Schema, opts);\n\n    } else {\n      this.broadcastMessageType(typeOrSchema as string, messageOrOptions, opts);\n    }\n  }\n\n  public broadcastPatch() {\n    if (!this._simulationInterval) {\n      this.clock.tick();\n    }\n\n    if (!this.state) {\n      return false;\n    }\n\n    const hasChanges = this._serializer.applyPatches(this.clients, this.state);\n\n    // broadcast messages enqueued for \"after patch\"\n    this.broadcastAfterPatch();\n\n    return hasChanges;\n  }\n\n  public onMessage<T = any>(messageType: '*', callback: (client: Client, type: string | number, message: T) => void);\n  public onMessage<T = any>(messageType: string | number, callback: (client: Client, message: T) => void);\n  public onMessage<T = any>(messageType: '*' | string | number, callback: (...args: any[]) => void) {\n    this.onMessageHandlers[messageType] = callback;\n    // returns a method to unbind the callback\n    return () => delete this.onMessageHandlers[messageType];\n  }\n\n  public async disconnect(): Promise<any> {\n    this.internalState = RoomInternalState.DISCONNECTING;\n    await this.listing.remove();\n\n    this.autoDispose = true;\n\n    const delayedDisconnection = new Promise<void>((resolve) =>\n      this._events.once('disconnect', () => resolve()));\n\n    for (const reconnection of Object.values(this.reconnections)) {\n      reconnection.reject();\n    }\n\n    let numClients = this.clients.length;\n    if (numClients > 0) {\n      // clients may have `async onLeave`, room will be disposed after they're fulfilled\n      while (numClients--) {\n        this._forciblyCloseClient(this.clients[numClients], Protocol.WS_CLOSE_CONSENTED);\n      }\n    } else {\n      // no clients connected, dispose immediately.\n      this._events.emit('dispose');\n    }\n\n    return await delayedDisconnection;\n  }\n\n  public async ['_onJoin'](client: Client, req?: http.IncomingMessage) {\n    const sessionId = client.sessionId;\n\n    if (this.reservedSeatTimeouts[sessionId]) {\n      clearTimeout(this.reservedSeatTimeouts[sessionId]);\n      delete this.reservedSeatTimeouts[sessionId];\n    }\n\n    // clear auto-dispose timeout.\n    if (this._autoDisposeTimeout) {\n      clearTimeout(this._autoDisposeTimeout);\n      this._autoDisposeTimeout = undefined;\n    }\n\n    // get seat reservation options and clear it\n    const options = this.reservedSeats[sessionId];\n    delete this.reservedSeats[sessionId];\n\n    // bind clean-up callback when client connection closes\n    client.ref.once('close', this._onLeave.bind(this, client));\n\n    this.clients.push(client);\n\n    const reconnection = this.reconnections[sessionId];\n    if (reconnection) {\n      reconnection.resolve(client);\n\n    } else {\n      try {\n        client.auth = await this.onAuth(client, options, req);\n\n        if (!client.auth) {\n          throw new ServerError(ErrorCode.AUTH_FAILED, 'onAuth failed');\n        }\n\n        if (this.onJoin) {\n          await this.onJoin(client, options, client.auth);\n        }\n      } catch (e) {\n        spliceOne(this.clients, this.clients.indexOf(client));\n\n        // make sure an error code is provided.\n        if (!e.code) {\n          e.code = ErrorCode.APPLICATION_ERROR;\n        }\n\n        throw e;\n\n      } finally {\n        // remove seat reservation\n        delete this.reservedSeats[sessionId];\n      }\n    }\n\n    // emit 'join' to room handler\n    this._events.emit('join', client);\n\n    // allow client to send messages after onJoin has succeeded.\n    client.ref.on('message', this._onMessage.bind(this, client));\n\n    // confirm room id that matches the room name requested to join\n    client.raw(getMessageBytes[Protocol.JOIN_ROOM](\n      this._serializer.id,\n      this._serializer.handshake && this._serializer.handshake(),\n    ));\n  }\n\n  public allowReconnection(previousClient: Client, seconds: number = Infinity): Deferred<Client> {\n    if (this.internalState === RoomInternalState.DISCONNECTING) {\n      this._disposeIfEmpty(); // gracefully shutting down\n      throw new Error('disconnecting');\n    }\n\n    const sessionId = previousClient.sessionId;\n    this._reserveSeat(sessionId, true, seconds, true);\n\n    // keep reconnection reference in case the user reconnects into this room.\n    const reconnection = new Deferred<Client>();\n    this.reconnections[sessionId] = reconnection;\n\n    if (seconds !== Infinity) {\n      // expire seat reservation after timeout\n      this.reservedSeatTimeouts[sessionId] = setTimeout(() =>\n        reconnection.reject(false), seconds * 1000);\n    }\n\n    const cleanup = () => {\n      delete this.reservedSeats[sessionId];\n      delete this.reconnections[sessionId];\n      delete this.reservedSeatTimeouts[sessionId];\n    };\n\n    reconnection.\n      then((newClient) => {\n        newClient.auth = previousClient.auth;\n        previousClient.ref = newClient.ref; // swap \"ref\" for convenience\n        previousClient.state = ClientState.RECONNECTED;\n        clearTimeout(this.reservedSeatTimeouts[sessionId]);\n        cleanup();\n      }).\n      catch(() => {\n        cleanup();\n        this.resetAutoDisposeTimeout();\n      });\n\n    return reconnection;\n  }\n\n  protected resetAutoDisposeTimeout(timeoutInSeconds: number = 1) {\n    clearTimeout(this._autoDisposeTimeout);\n\n    if (!this.autoDispose) {\n      return;\n    }\n\n    this._autoDisposeTimeout = setTimeout(() => {\n      this._autoDisposeTimeout = undefined;\n      this._disposeIfEmpty();\n    }, timeoutInSeconds * 1000);\n  }\n\n  private broadcastMessageSchema<T extends Schema>(message: T, options: IBroadcastOptions = {}) {\n    const encodedMessage = getMessageBytes[Protocol.ROOM_DATA_SCHEMA](message);\n\n    let numClients = this.clients.length;\n    while (numClients--) {\n      const client = this.clients[numClients];\n\n      if (options.except !== client) {\n        client.enqueueRaw(encodedMessage);\n      }\n    }\n  }\n\n  private broadcastMessageType(type: string, message?: any, options: IBroadcastOptions = {}) {\n    const encodedMessage = getMessageBytes[Protocol.ROOM_DATA](type, message);\n\n    let numClients = this.clients.length;\n    while (numClients--) {\n      const client = this.clients[numClients];\n\n      if (options.except !== client) {\n        client.enqueueRaw(encodedMessage);\n      }\n    }\n  }\n\n  private sendFullState(client: Client): void {\n    client.enqueueRaw(getMessageBytes[Protocol.ROOM_STATE](this._serializer.getFullState(client)));\n  }\n\n  private broadcastAfterPatch() {\n    const length = this._afterNextPatchBroadcasts.length;\n\n    if (length > 0) {\n      for (let i = 0; i < length; i++) {\n        this.broadcast.apply(this, this._afterNextPatchBroadcasts[i]);\n      }\n\n      // new messages may have been added in the meantime,\n      // let's splice the ones that have been processed\n      this._afterNextPatchBroadcasts.splice(0, length);\n    }\n  }\n\n  private async _reserveSeat(\n    sessionId: string,\n    joinOptions: any = true,\n    seconds: number = this.seatReservationTime,\n    allowReconnection: boolean = false,\n  ) {\n    if (!allowReconnection && this.hasReachedMaxClients()) {\n      return false;\n    }\n\n    this.reservedSeats[sessionId] = joinOptions;\n\n    if (!allowReconnection) {\n      await this._incrementClientCount();\n\n      this.reservedSeatTimeouts[sessionId] = setTimeout(async () => {\n        delete this.reservedSeats[sessionId];\n        delete this.reservedSeatTimeouts[sessionId];\n        await this._decrementClientCount();\n      }, seconds * 1000);\n\n      this.resetAutoDisposeTimeout(seconds);\n    }\n\n    return true;\n  }\n\n  private _disposeIfEmpty() {\n    const willDispose = (\n      this.autoDispose &&\n      this._autoDisposeTimeout === undefined &&\n      this.clients.length === 0 &&\n      Object.keys(this.reservedSeats).length === 0\n    );\n\n    if (willDispose) {\n      this._events.emit('dispose');\n    }\n\n    return willDispose;\n  }\n\n  private async _dispose(): Promise<any> {\n    let userReturnData;\n\n    if (this.onDispose) {\n      userReturnData = this.onDispose();\n    }\n\n    if (this._patchInterval) {\n      clearInterval(this._patchInterval);\n      this._patchInterval = undefined;\n    }\n\n    if (this._simulationInterval) {\n      clearInterval(this._simulationInterval);\n      this._simulationInterval = undefined;\n    }\n\n    if (this._autoDisposeTimeout) {\n      clearInterval(this._autoDisposeTimeout);\n      this._autoDisposeTimeout = undefined;\n    }\n\n    // clear all timeouts/intervals + force to stop ticking\n    this.clock.clear();\n    this.clock.stop();\n\n    return await (userReturnData || Promise.resolve());\n  }\n\n  private _onMessage(client: Client, bytes: number[]) {\n    // skip if client is on LEAVING state.\n    if (client.state === ClientState.LEAVING) { return; }\n\n    const it: Iterator = { offset: 0 };\n    const code = decode.uint8(bytes, it);\n\n    if (!bytes) {\n      debugAndPrintError(`${this.roomName} (${this.roomId}), couldn't decode message: ${bytes}`);\n      return;\n    }\n\n    if (code === Protocol.ROOM_DATA) {\n      const messageType = (decode.stringCheck(bytes, it))\n        ? decode.string(bytes, it)\n        : decode.number(bytes, it);\n\n      let message;\n      try {\n        message = (bytes.length > it.offset)\n        ? msgpack.decode(bytes.slice(it.offset, bytes.length))\n        : undefined;\n      } catch (e) {\n        debugAndPrintError(e);\n        return;\n      }\n\n      if (this.onMessageHandlers[messageType]) {\n        this.onMessageHandlers[messageType](client, message);\n\n      } else if (this.onMessageHandlers['*']) {\n        (this.onMessageHandlers['*'] as any)(client, messageType, message);\n\n      } else {\n        debugAndPrintError(`onMessage for \"${messageType}\" not registered.`);\n      }\n\n    } else if (code === Protocol.JOIN_ROOM) {\n      // join room has been acknowledged by the client\n      client.state = ClientState.JOINED;\n\n      // send current state when new client joins the room\n      if (this.state) {\n        this.sendFullState(client);\n      }\n\n      // dequeue messages sent before client has joined effectively (on user-defined `onJoin`)\n      if (client._enqueuedMessages.length > 0) {\n        client._enqueuedMessages.forEach((enqueued) => client.raw(enqueued));\n      }\n      delete client._enqueuedMessages;\n\n    } else if (code === Protocol.LEAVE_ROOM) {\n      this._forciblyCloseClient(client, Protocol.WS_CLOSE_CONSENTED);\n    }\n\n  }\n\n  private _forciblyCloseClient(client: Client, closeCode: number) {\n    // stop receiving messages from this client\n    client.ref.removeAllListeners('message');\n\n    // prevent \"onLeave\" from being called twice if player asks to leave\n    const closeListeners: any[] = client.ref.listeners('close');\n    if (closeListeners.length >= 2) {\n      client.ref.removeListener('close', closeListeners[1]);\n    }\n\n    // only effectively close connection when \"onLeave\" is fulfilled\n    this._onLeave(client, closeCode).then(() => client.leave(Protocol.WS_CLOSE_NORMAL));\n  }\n\n  private async _onLeave(client: Client, code?: number): Promise<any> {\n    const success = spliceOne(this.clients, this.clients.indexOf(client));\n\n    // call 'onLeave' method only if the client has been successfully accepted.\n    if (success && this.onLeave) {\n      try {\n        client.state = ClientState.LEAVING;\n        await this.onLeave(client, (code === Protocol.WS_CLOSE_CONSENTED));\n\n      } catch (e) {\n        debugAndPrintError(`onLeave error: ${(e && e.message || e || 'promise rejected')}`);\n      }\n    }\n\n    if (client.state !== ClientState.RECONNECTED) {\n      // try to dispose immediatelly if client reconnection isn't set up.\n      const willDispose = await this._decrementClientCount();\n\n      this._events.emit('leave', client, willDispose);\n    }\n  }\n\n  private async _incrementClientCount() {\n    // lock automatically when maxClients is reached\n    if (!this._locked && this.hasReachedMaxClients()) {\n      this._maxClientsReached = true;\n      this.lock.call(this, true);\n    }\n\n    await this.listing.updateOne({\n      $inc: { clients: 1 },\n      $set: { locked: this._locked },\n    });\n  }\n\n  private async _decrementClientCount() {\n    const willDispose = this._disposeIfEmpty();\n\n    if (this.internalState === RoomInternalState.DISCONNECTING) {\n      return;\n    }\n\n    // unlock if room is available for new connections\n    if (!willDispose) {\n      if (this._maxClientsReached && !this._lockedExplicitly) {\n        this._maxClientsReached = false;\n        this.unlock.call(this, true);\n      }\n\n      // update room listing cache\n      await this.listing.updateOne({\n        $inc: { clients: -1 },\n        $set: { locked: this._locked },\n      });\n    }\n\n    return willDispose;\n  }\n\n}\n"]}