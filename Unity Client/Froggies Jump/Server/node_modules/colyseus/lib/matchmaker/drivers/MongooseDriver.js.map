{"version":3,"file":"MongooseDriver.js","sourceRoot":"","sources":["../../../src/matchmaker/drivers/MongooseDriver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qDAAsD;AAGtD,MAAM,eAAe,GAAW,IAAI,iBAAM,CAAC;IACzC,OAAO,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,EAAE;IACrC,MAAM,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE;IACzC,UAAU,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE;IAC/C,QAAQ,EAAE,iBAAM,CAAC,KAAK,CAAC,KAAK;IAC5B,IAAI,EAAE,MAAM;IACZ,OAAO,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE;IAC1C,SAAS,EAAE,MAAM;IACjB,MAAM,EAAE,MAAM;IACd,QAAQ,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE;CAC5C,EAAE;IACD,MAAM,EAAE,KAAK;IACb,UAAU,EAAE,IAAI;IAChB,UAAU,EAAE,KAAK;CAClB,CAAC,CAAC;AAEH,eAAe,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;AAC/C,eAAe,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;AAErC,MAAM,SAAS,GAAG,kBAAQ,CAAC,KAAK,CAAW,WAAW,EAAE,eAAe,CAAC,CAAC;AAEzE,MAAa,cAAc;IAEzB,YAAY,aAAsB;QAEhC,IAAI,kBAAQ,CAAC,UAAU,CAAC,UAAU,KAAK,kBAAQ,CAAC,MAAM,CAAC,YAAY,EAAE;YACnE,kBAAQ,CAAC,OAAO,CAAC,aAAa,IAAI,OAAO,CAAC,GAAG,CAAC,SAAS,IAAI,oCAAoC,EAAE;gBAC/F,SAAS,EAAE,IAAI;gBACf,cAAc,EAAE,IAAI;gBACpB,gBAAgB,EAAE,IAAI;gBACtB,eAAe,EAAE,IAAI;gBACrB,kBAAkB,EAAE,IAAI;aACzB,CAAC,CAAC;SACJ;IACH,CAAC;IAEM,cAAc,CAAC,gBAAqB,EAAE;QAC3C,OAAQ,IAAI,SAAS,CAAC,aAAa,CAA4B,CAAC;IAClE,CAAC;IAEY,IAAI,CAAC,UAAqC,EAAE,0BAA0B,GAAG,EAAE;;YACtF,OAAO,CAAC,MAAM,SAAS,CAAC,IAAI,CAAC,UAAU,kBACrC,GAAG,EAAE,KAAK,EACV,OAAO,EAAE,IAAI,EACb,SAAS,EAAE,IAAI,EACf,MAAM,EAAE,IAAI,EACZ,UAAU,EAAE,IAAI,EAChB,QAAQ,EAAE,IAAI,EACd,IAAI,EAAE,IAAI,EACV,MAAM,EAAE,IAAI,IACT,0BAA0B,EAC7B,CAA6B,CAAC;QAClC,CAAC;KAAA;IAEM,OAAO,CAAC,UAAqC;QAClD,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,UAAU,EAAE;YACpC,GAAG,EAAE,CAAC;SACP,CAAC,CAAyC,CAAC;IAC9C,CAAC;CAEF;AAvCD,wCAuCC","sourcesContent":["import mongoose, { Document, Schema } from 'mongoose';\nimport { IRoomListingData, MatchMakerDriver, QueryHelpers, RoomListingData } from './Driver';\n\nconst RoomCacheSchema: Schema = new Schema({\n  clients: { type: Number, default: 0 },\n  locked: { type: Boolean, default: false },\n  maxClients: { type: Number, default: Infinity },\n  metadata: Schema.Types.Mixed,\n  name: String,\n  private: { type: Boolean, default: false },\n  processId: String,\n  roomId: String,\n  unlisted: { type: Boolean, default: false }, // used for default LobbyRoom (prevent from showing up on room listing)\n}, {\n  strict: false,\n  timestamps: true,\n  versionKey: false,\n});\n\nRoomCacheSchema.index({ name: 1, locked: -1 });\nRoomCacheSchema.index({ roomId: 1 });\n\nconst RoomCache = mongoose.model<Document>('RoomCache', RoomCacheSchema);\n\nexport class MongooseDriver implements MatchMakerDriver {\n\n  constructor(connectionURI?: string) {\n\n    if (mongoose.connection.readyState === mongoose.STATES.disconnected) {\n      mongoose.connect(connectionURI || process.env.MONGO_URI || 'mongodb://127.0.0.1:27017/colyseus', {\n        autoIndex: true,\n        useCreateIndex: true,\n        useFindAndModify: true,\n        useNewUrlParser: true,\n        useUnifiedTopology: true,\n      });\n    }\n  }\n\n  public createInstance(initialValues: any = {}) {\n    return (new RoomCache(initialValues) as any) as RoomListingData;\n  }\n\n  public async find(conditions: Partial<IRoomListingData>, additionalProjectionFields = {}) {\n    return (await RoomCache.find(conditions, {\n      _id: false,\n      clients: true,\n      createdAt: true,\n      locked: true,\n      maxClients: true,\n      metadata: true,\n      name: true,\n      roomId: true,\n      ...additionalProjectionFields,\n    })) as any as RoomListingData[];\n  }\n\n  public findOne(conditions: Partial<IRoomListingData>) {\n    return (RoomCache.findOne(conditions, {\n      _id: 0,\n    })) as any as QueryHelpers<RoomListingData>;\n  }\n\n}\n"]}